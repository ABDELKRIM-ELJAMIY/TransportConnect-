%% Use Case Diagram
%% DÃ©claration correcte du type de diagramme
%% Vous pouvez enlever le commentaire suivant si vous Ãªtes dans un Ã©diteur strict
%%{ init: { "theme": "default" } }%%
%% Utiliser directement le mot-clÃ© "%% usecaseDiagram" n'est pas supportÃ©, utilisez "graph TD" avec les formes.

%% Utilisez une structure adaptÃ©e Ã  Mermaid pour simuler un diagramme de cas dâ€™utilisation

graph TD

%% DÃ©claration des acteurs
Utilisateur[Utilisateur] --> CreerCompte((CrÃ©er compte))
Utilisateur --> SeConnecter((Se connecter))
Utilisateur --> SeDeconnecter((Se dÃ©connecter))
Utilisateur --> ModifierProfil((Modifier profil))
Utilisateur --> RecevoirNotification((Recevoir notification))

Conducteur[Conducteur] --> PublierAnnonce((Publier une annonce))
Conducteur --> VoirDemandesRecues((Voir demandes reÃ§ues))
Conducteur --> AccepterDemande((Accepter une demande))
Conducteur --> RefuserDemande((Refuser une demande))
Conducteur --> HistoriqueTrajets((Consulter historique trajets))
Conducteur --> EvaluerExpediteur((Ã‰valuer un expÃ©diteur))

Expediteur[ExpÃ©diteur] --> RechercherTrajets((Rechercher des trajets))
Expediteur --> EnvoyerDemande((Envoyer une demande))
Expediteur --> HistoriqueEnvois((Consulter historique envois))
Expediteur --> EvaluerConducteur((Ã‰valuer un conducteur))
Expediteur --> FiltrerAnnonces((Filtrer les annonces))

Administrateur[Administrateur] --> AccederDashboard((AccÃ©der au dashboard))
Administrateur --> ValiderUtilisateur((Valider un utilisateur))
Administrateur --> SuspendreUtilisateur((Suspendre un utilisateur))
Administrateur --> AttribuerBadge((Attribuer un badge))
Administrateur --> GererAnnonces((GÃ©rer les annonces))
Administrateur --> Statistiques((Consulter les statistiques))
Administrateur --> ModifierAnnonce((Modifier une annonce))
Administrateur --> SupprimerAnnonce((Supprimer une annonce))
   classDiagram

class User {
  +id: String
  +nom: String
  +prenom: String
  +email: String
  +telephone: String
  +motDePasse: String
  +dateCreation: Date
  +estVerifie: Boolean
  +estActif: Boolean
  +role: String
  --
  +creerCompte()
  +seConnecter()
  +seDeconnecter()
  +modifierInformations()
  +recevoirNotification()
}

class Conducteur {
  +permisConduire: String
  +vehicule: String
  +noteGlobale: Double
  +nombreVoyages: Int
  --
  +publierAnnonce()
  +voirDemandesRecues()
  +accepterDemande()
  +refuserDemande()
  +consulterHistorique()
  +evaluerExpediteur()
}

class Expediteur {
  +noteGlobale: Double
  +nombreEnvois: Int
  --
  +rechercherTrajets()
  +envoyerDemande()
  +consulterHistoriqueEnvois()
  +evaluerConducteur()
  +filtrerAnnonces()
}

class Administrateur {
  +niveau: String
  +dateNomination: Date
  --
  +accederDashboard()
  +validerUtilisateur()
  +suspendreUtilisateur()
  +attribuerBadge()
  +gererAnnonces()
  +consulterStatistiques()
  +modifierAnnonce()
  +supprimerAnnonce()
}

class Annonce {
  +id: String
  +lieuDepart: String
  +destination: String
  +etapesIntermediaires: List
  +dateDepart: Date
  +dateArrivee: Date
  +dimensionMaxLongueur: Double
  +dimensionMaxLargeur: Double
  +dimensionMaxHauteur: Double
  +poidsMaximum: Double
  +typeMarchandise: String
  +capaciteDisponible: Double
  +prix: Double
  +statut: String
  +datePublication: Date
  --
  +publier()
  +modifier()
  +supprimer()
  +consulter()
}

class DemandeTransport {
  +id: String
  +description: String
  +dimensionLongueur: Double
  +dimensionLargeur: Double
  +dimensionHauteur: Double
  +poids: Double
  +typeColis: String
  +statut: String
  +dateCreation: Date
  +dateReponse: Date
  +commentaire: String
  --
  +envoyer()
  +accepter()
  +refuser()
  +modifier()
  +annuler()
}

class Trajet {
  +id: String
  +dateDepart: Date
  +dateArriveeReelle: Date
  +statut: String
  +commentaireConducteur: String
  +commentaireExpediteur: String
  +dateCreation: Date
  --
  +commencer()
  +terminer()
  +annuler()
  +suivre()
}

class Colis {
  +id: String
  +reference: String
  +description: String
  +poids: Double
  +longueur: Double
  +largeur: Double
  +hauteur: Double
  +type: String
  +statut: String
  +dateExpedition: Date
  +dateLivraison: Date
  --
  +creer()
  +suivre()
  +livrer()
  +signaler()
}

class Evaluation {
  +id: String
  +note: Int
  +commentaire: String
  +dateEvaluation: Date
  +type: String
  --
  +creer()
  +modifier()
  +supprimer()
  +consulter()
}

class Notification {
  +id: String
  +titre: String
  +message: String
  +dateEnvoi: Date
  +estLue: Boolean
  +type: String
  --
  +envoyer()
  +marquerCommeLue()
  +supprimer()
}

class Historique {
  +id: String
  +action: String
  +dateAction: Date
  +details: String
  +statut: String
  --
  +enregistrer()
  +consulter()
  +filtrer()
}

class Statistiques {
  +id: String
  +nombreAnnonces: Int
  +nombreUtilisateurs: Int
  +tauxAcceptation: Double
  +utilisateursActifs: Int
  +dateMesure: Date
  --
  +calculer()
  +genererGraphique()
  +exporter()
}

%% HÃ©ritage
User <|-- Conducteur
User <|-- Expediteur
User <|-- Administrateur

%% Associations avec cardinalitÃ©s
Conducteur "1" --> "0..*" Annonce
Expediteur "1" --> "0..*" DemandeTransport
Annonce "1" --> "0..*" DemandeTransport
DemandeTransport "1" --> "0..1" Trajet
Trajet "1" --> "1..*" Colis

User "1" --> "0..*" Evaluation
User "1" --> "0..*" Notification
User "1" --> "0..*" Historique

Administrateur "1" --> "0..*" Statistiques
Administrateur "1" --> "0..*" User
Administrateur "1" --> "0..*" Annonce
   /backend
    /config
        - db.js
        - server.js
    /controllers
        - authController.js
        - userController.js
        - conducteurController.js
        - expediteurController.js
        - annonceController.js
        - demandeController.js
        - adminController.js
        - notificationController.js
    /models
        - User.js
        - Conducteur.js
        - Expediteur.js
        - Annonce.js
        - DemandeTransport.js
        - Trajet.js
        - Colis.js
        - Evaluation.js
        - Notification.js
        - Statistiques.js
    /routes
        - authRoutes.js
        - userRoutes.js
        - conducteurRoutes.js
        - expediteurRoutes.js
        - adminRoutes.js
        - annonceRoutes.js
        - demandeRoutes.js
        - notificationRoutes.js
    /middleware
        - authMiddleware.js
        - roleMiddleware.js
    /utils
        - validateInput.js
        - sendEmail.js
    - app.js
    - config.js
    - .env
    - package.json




 Authentication APIs
POST /api/auth/register â†’ Enregistrement dâ€™un utilisateur (conducteur ou expÃ©diteur)
POST /api/auth/login â†’ Connexion de lâ€™utilisateur avec JWT
GET /api/auth/me â†’ RÃ©cupÃ©ration des informations de lâ€™utilisateur connectÃ©

ðŸ‘¤ User Management APIs
PUT /api/users/:id â†’ Mise Ã  jour du profil utilisateur
GET /api/users/:id â†’ Affichage du profil dâ€™un utilisateur
GET /api/users â†’ Liste des utilisateurs (admin uniquement)
PATCH /api/users/:id/status â†’ Activer ou dÃ©sactiver un utilisateur (admin)
PATCH /api/users/:id/verify â†’ VÃ©rifier un utilisateur et lui attribuer un badge (admin)

ðŸš› Annonce APIs (Conducteur)
POST /api/annonces â†’ CrÃ©ation dâ€™une annonce de trajet
GET /api/annonces â†’ Affichage de toutes les annonces (avec filtres possibles)
GET /api/annonces/:id â†’ DÃ©tails dâ€™une annonce spÃ©cifique
PUT /api/annonces/:id â†’ Modification dâ€™une annonce (par le conducteur ou lâ€™admin)
DELETE /api/annonces/:id â†’ Suppression dâ€™une annonce (par le conducteur ou lâ€™admin)
GET /api/annonces/mine â†’ Affichage des annonces du conducteur connectÃ©

ðŸ“¦ Demande APIs (ExpÃ©diteur)
POST /api/demandes â†’ CrÃ©ation dâ€™une demande dâ€™envoi
GET /api/demandes/mine â†’ Consultation des demandes envoyÃ©es par lâ€™expÃ©diteur
GET /api/annonces/:id/demandes â†’ Voir les demandes dâ€™une annonce (conducteur)
PATCH /api/demandes/:id/status â†’ Accepter ou refuser une demande (conducteur)
DELETE /api/demandes/:id â†’ Annulation dâ€™une demande avant acceptation (expÃ©diteur)

